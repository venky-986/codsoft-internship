#include <iostream>
#include <vector>
using namespace std;
struct Task {
    string description;
    bool completed;
    Task(string desc) : description(desc), completed(false) {}
};
class TodoList {
private:
    vector<Task> tasks;

public:
    void addTask(const string& desc) {
        Task newTask(desc);
        tasks.push_back(newTask);
        cout << "Task added: " << desc << endl;
    }

    void viewTasks() {
        cout << "Tasks:" << endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". ";
            cout << (tasks[i].completed ? "[X] " : "[ ] ");
            cout << tasks[i].description << endl;
        }
    }

    void markTaskAsCompleted(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            tasks[index - 1].completed = true;
            cout << "Task marked as completed: " << tasks[index - 1].description << endl;
        } else {
            cout << "Invalid task index." << endl;
        }
    }

    void removeTask(size_t index) {
        if (index >= 1&& index <= tasks.size()) {
            cout <<"Task removed: "<<tasks[index - 1].description << endl;
            tasks.erase(tasks.begin() + index - 1);
        } else {
            cout << "Invalid task index." << endl;
        }
    }
};

int main() {
    TodoList todoList;

    while (true) {
        cout << "\nOptions:\n1. Add Task\n2. View Tasks\n3. Mark Task as Completed\n4. Remove Task\n5. Exit\n";
        int choice;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                string taskDescription;
                cout << "Enter task description: ";
                cin.ignore(); // Clear the buffer
                getline(cin, taskDescription);
                todoList.addTask(taskDescription);
                break;
            }
            case 2:
                todoList.viewTasks();
                break;
            case 3: {
                size_t index;
                cout << "Enter the task number to mark as completed: ";
                cin >> index;
                todoList.markTaskAsCompleted(index);
                break;
            }
            case 4: {
                size_t index;
                cout << "Enter the task number to remove: ";
                cin >> index;
                todoList.removeTask(index);
                break;
            }
            case 5:
                cout<<"Exiting program." << endl;
                return 0;
            default:
                cout<< "Invalid choice. Please enter a number between 1 and 5." << endl;
        }
    }
system("pause");
    return 0;
}
